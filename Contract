use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    pubkey::Pubkey,
};

entrypoint!(process_instruction);

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!("NeusAi Token Program Start");

    let accounts_iter = &mut accounts.iter();
    let account = next_account_info(accounts_iter)?;

    if !account.is_signer {
        msg!("Missing signer!");
        return Err(ProgramError::MissingRequiredSignature);
    }

    match instruction_data[0] {
        0 => mint_tokens(account, instruction_data),
        1 => burn_tokens(account, instruction_data),
        _ => Err(ProgramError::InvalidInstructionData),
    }
}

fn mint_tokens(account: &AccountInfo, instruction_data: &[u8]) -> ProgramResult {
    let amount = instruction_data[1];
    msg!("Minting {} tokens to {:?}", amount, account.key);
    Ok(())
}

fn burn_tokens(account: &AccountInfo, instruction_data: &[u8]) -> ProgramResult {
    let amount = instruction_data[1];
    msg!("Burning {} tokens from {:?}", amount, account.key);
    Ok(())
}
